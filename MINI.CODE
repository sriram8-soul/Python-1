import pandas as pd
import zipfile as zip
import subprocess
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
import numpy as np
import matplotlib.pyplot as plt

kaggle = True
sriram=pd.read_csv("C:/Users/msesh/Downloads/car_price_dataset.csv")
sriram
sriram.info()
sriram.describe()
sriram.isna().count()
brand_counts = sriram[['Brand', 'Model', 'Mileage', 'Price']].value_counts()
brand_counts = brand_counts.sort_values(ascending=False)
print(brand_counts)top_brands = sriram.groupby(['Brand' ,'Model', 'Year']) ['Price'].max().sort_values(ascending=False)
top_10_brands = top_brands.head(10)
print(top_10_brands)
plt.figure(figsize=(8, 8))  
top_10_brands.plot.pie(autopct='%1.1f%%', startangle=90, cmap='tab10')


plt.title("Top 10 Brands and Models with Higher Price")
plt.ylabel('')  


plt.show()
top_brands = sriram.groupby(['Brand' ,'Model', 'Year']) ['Price'].max().sort_values(ascending=False)
Year_brands = top_brands.head(10)
print(Year_brands)
top_brands = sriram.groupby(['Brand' ,'Model', 'Transmission']) ['Price'].max().sort_values(ascending=False)
Transmission_brands = top_brands.head(20)
print(Transmission_brands)
df_corr = sriram[['Year',
                   'Engine_Size',
                   'Mileage',
                   'Doors',
                   'Owner_Count',
                   'Price']].corr(method='pearson')

fig = go.Figure(go.Heatmap(x = df_corr.columns,
                           y = df_corr.columns,
                           z = df_corr.values.tolist(),
                           colorscale = 'rdbu',
                           zmin = -1,
                           zmax = 1))

fig.update_layout(width = 800,
                  height = 700)
if kaggle:
    fig.show(renderer='iframe_connected')
else:
    fig.show()
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
X = sriram.drop(columns=["Price"])  
y = sriram["Price"]
categorical_cols = X.select_dtypes(include=["object"]).columns
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
    label_encoders[col] = le
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train.shape, X_test.shape
X
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score


model = LinearRegression()


model.fit(X_train, y_train)


y_pred = model.predict(X_test)


mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"MAE: {mae:.2f}")
print(f"MSE: {mse:.2f}")
print(f"R²: {r2:.4f}")
errors = y_test - y_pred


fig = px.histogram(errors, nbins=50, title="Distribución de Errores (Residuos)")
if kaggle:
    fig.show(renderer='iframe_connected')
else:
    fig.show()
fig = go.Figure()

fig.add_trace(go.Scatter(x=y_test, y=y_pred, mode="markers", name="prediction vs Real"))
fig.add_trace(go.Scatter(x=y_test, y=y_test, mode="lines", name="Línea Ideal", line=dict(color="red")))

fig.update_layout(title="Comparision:  Real vs Prediction",
                  xaxis_title="Precio Real",
                  yaxis_title="Precio Predicho")

if kaggle:
    fig.show(renderer='iframe_connected')
else:
    fig.show()
